security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # lazy: true
            # provider: users_in_memory
            # custom_authenticator: App\Security\UserAuthentificatorAuthenticator
            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                default_target_path: route_accueil
            logout:
                path: app_logout
                target: /login
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         # ACCES ROLE ADMIN - ADMIN
         - { path: ^/admin, roles: ROLE_ADMIN }

         # ACCES ROLE USER - USER
         - { path: ^/maison/lister, roles: ROLE_USER }

         # ACCES ROLE PROF - PROFESSEUR
         - { path: ^/professeur, roles: ROLE_PROFESSEUR }
         
         # ACCES ROLE PROF - PROMOTION
         - { path: ^/promotion, roles: ROLE_PROFESSEUR }

         # ACCES ROLE PROF - ETUDIANT
         - { path: ^/etudiant, roles: ROLE_PROFESSEUR }

         # ACCES ROLE PROF - MATIERE
         - { path: ^/matiere, roles: ROLE_PROFESSEUR }

         # ACCES ROLE PROF - MAISON
         - { path: ^/maison, roles: ROLE_PROFESSEUR }

         # ACCES ROLE PROF - BAGUETTE
         - { path: ^/baguette, roles: ROLE_PROFESSEUR }

         # ACCES ROLE PROF - NOTE
         - { path: ^/note, roles: ROLE_PROFESSEUR }

        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN: ['ROLE_PROFESSEUR']
        ROLE_SUPER_ADMIN: ['ROLE_ADMIN']

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
